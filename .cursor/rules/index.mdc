---
description: 
globs: 
alwaysApply: true
---
# Kirill Markin Website - Project Guide

Modern personal website built with Next.js 15. Migrated from Jekyll for performance.

## Core Principles

**Static Generation First**: Pre-render all content at build time with `generateStaticParams`. Aggressive caching. Zero server-side computation at request time. Dynamic pages only in rare exceptions.

**Server Components First**: Client components only where interactivity required. Minimal JavaScript to browser.

**Next.js 15 Async Params**:
```typescript
interface PageProps {
  params: Promise<{ slug: string }>;
}

export default async function Page({ params }: PageProps) {
  const { slug } = await params;
}
```

## Project Structure

```
src/
├── app/
│   ├── (default)/      # English static routes (lang="en")
│   │   ├── articles/, services/, meet/, pay/
│   ├── (i18n)/         # Localized routes
│   │   └── [lang]/[segment]/[subsegment]/
│   ├── sitemap.ts, robots.ts
├── components/         # UI components
├── content/articles/   # Markdown + translations/[lang]/
├── data/               # Structured data (services, media)
├── lib/                # Utils + localization.ts
└── types/
```

## Multilingual Architecture

**Route Groups:**
- `(default)` - English: `/articles/`, `/services/`, `/meet/short/`
- `(i18n)` - Localized: `/es/articulos/`, `/zh/zixun/`, `/ar/mawid/majani/`

**Path Mapping (same logical path, different words per language):**
- articles → articulos → zhishi → maqalat → gyan
- services → servicios → zixun → khadamat → sevaen
- meet/short → reservar/breve → yuyue/mianfei → mawid/majani

**Key Files:**
- `lib/localization.ts` - Path segment mapping & translations
- `(i18n)/[lang]/[segment]/page.tsx` - Dynamic segment resolution
- `(default)/*/page.tsx` - Static English routes

**⚠️ Before modifying routes**: Check `localization.ts` mappings

## Content

- **Articles**: `src/content/articles/` - Markdown with frontmatter, bidirectional translation refs
- **Services**: `src/data/servicesOther.ts` - Category filtering
- **Languages**: en, es, zh, ar, hi - Routes pre-generated with `generateStaticParams`

## SEO & Metadata

- Metadata via `generateMetadata()` per route, translations from `lib/localization.ts`
- Each language generates unique metadata (no reuse)
- Sitemap with GitHub API for lastmod dates
- Server-side `lang` and `dir` attributes (RTL for Arabic)

## Analytics & Events

- Custom events via `trackGtmEvent()` from `src/lib/gtm.ts` → GTM auto-forwards all to analytics systems
- Events buffered in `dataLayer` until GTM loads, no GTM config changes needed

## Development

**Commands:**
- `npm run dev` - Dev server
- `npm run build` - Production build
- `npm test` - Tests
- `npm run validate-metadata` - SEO validation
- `npx tsx scripts/test-cache-headers.ts` - Cache headers test

**Best Practices:**
- Server Components by default
- CSS Modules for styling
- Update `pageFilesMap` in `lib/fileModification.ts` for new pages (sitemap lastmod)
