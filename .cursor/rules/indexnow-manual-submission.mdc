---
description: To send url when content changed via IndexNow
globs: 
alwaysApply: false
---
# IndexNow Manual Submission

This document provides instructions for manually submitting URLs to search engines using the IndexNow API.

## What is IndexNow?

IndexNow is a protocol that allows website owners to instantly notify search engines about new or updated content. It's supported by:
- Microsoft Bing
- Yandex
- Seznam.cz (Czech search engine)
- Naver (Korean search engine)
- DuckDuckGo (partially, via Bing)

Note that Google doesn't directly support IndexNow, but typically indexes new content through its standard crawling process.

## Setting up the API Key

The IndexNow API key is stored in the environment variable `INDEXNOW_API_KEY`. There are several ways to set it:

1. Using the `.env.local` file in the project root:
   ```
   # In .env.local file
   INDEXNOW_API_KEY=your_api_key
   ```

2. For a single terminal session:
   ```bash
   export INDEXNOW_API_KEY=$(grep INDEXNOW_API_KEY .env.local | cut -d '=' -f2)
   ```

3. To read the key directly from `.env.local` for a single command:
   ```bash
   INDEXNOW_API_KEY=$(grep INDEXNOW_API_KEY .env.local | cut -d '=' -f2) curl -X POST ...
   ```

## Understanding Multilingual URL Structure

The website uses a localized URL structure that varies by language. To correctly submit URLs, you need to understand this structure:

1. **URL Format by Language:**
   - English (default): `/articles/article-slug/`
   - Non-English: `/[language-code]/[localized-articles-segment]/article-slug/`

2. **Localized Segments Mapping:**
   The word "articles" is translated differently in each language:
   - English: `articles`
   - Spanish: `articulos`
   - Chinese: `zhishi`
   - Arabic: `maqalat`
   - Hindi: `gyan`

3. **Finding the Correct URL:**
   - Check the article's markdown file location in `src/content/articles/` or its translations folder
   - Look at the `language` field in the frontmatter to determine which language URL structure to use
   - Use the `PATH_SEGMENTS` mapping in `src/lib/localization.ts` to find the correct localized segment

For example, if submitting a Chinese article with slug "cursor-ide-ai-bianma-guize-youhua", the URL would be:
`https://kirill-markin.com/zh/zhishi/cursor-ide-ai-bianma-guize-youhua/`

## Pre-Submission URL Verification

IMPORTANT: Before submitting any URL to IndexNow, always verify that it's publicly accessible:

1. Check each URL manually in a browser to confirm it exists and displays correctly
2. Verify URLs with curl to ensure they return a successful status code:
   ```bash
   curl -I https://kirill-markin.com/path/to/verify/
   ```
3. Only submit URLs that return 200 OK status codes
4. Pay special attention to:
   - Localized URLs with language prefixes
   - URLs with special characters or URL encoding
   - Recently deployed content that might not be live yet

This verification step prevents wasting your daily submission quota on non-existent pages and avoids negative impact on your site's indexing reputation.

## Submitting URLs to IndexNow

### Basic Command (Single-Line Format)

Always use the `-v` (verbose) flag to see the full API response including status codes.

IMPORTANT: When using terminal tools in Cursor IDE, all commands must be in a single line without line breaks:

```bash
curl -v -X POST https://api.indexnow.org/indexnow -H "Content-Type: application/json; charset=utf-8" -d '{"host":"kirill-markin.com","key":"'${INDEXNOW_API_KEY}'","keyLocation":"https://kirill-markin.com/'${INDEXNOW_API_KEY}'.txt","urlList":["https://kirill-markin.com/articles/example-article/"]}'
```

Always verify the response code in the terminal output. A successful submission will show `HTTP/2 200`.

### Single URL Submission (GET Method)

For a single URL, you can use a simple GET request (still include the `-v` flag):

```bash
curl -v "https://api.indexnow.org/indexnow?url=https://kirill-markin.com/articles/example-article/&key=${INDEXNOW_API_KEY}"
```

## Common Use Cases

### 1. Submit a newly published article

```bash
# First verify the URL is accessible
curl -I https://kirill-markin.com/articles/new-article-slug/

# Then submit to IndexNow (single-line format for Cursor IDE)
export INDEXNOW_API_KEY=$(grep INDEXNOW_API_KEY .env.local | cut -d '=' -f2)
curl -v -X POST https://api.indexnow.org/indexnow -H "Content-Type: application/json; charset=utf-8" -d '{"host":"kirill-markin.com","key":"'${INDEXNOW_API_KEY}'","keyLocation":"https://kirill-markin.com/'${INDEXNOW_API_KEY}'.txt","urlList":["https://kirill-markin.com/articles/new-article-slug/"]}'
```

### 2. Submit multilingual article example

```bash
# First verify the URL is accessible (Chinese article example)
curl -I https://kirill-markin.com/zh/zhishi/cursor-ide-ai-bianma-guize-youhua/

# Then submit to IndexNow (single-line format for Cursor IDE)
export INDEXNOW_API_KEY=$(grep INDEXNOW_API_KEY .env.local | cut -d '=' -f2)
curl -v -X POST https://api.indexnow.org/indexnow -H "Content-Type: application/json; charset=utf-8" -d '{"host":"kirill-markin.com","key":"'${INDEXNOW_API_KEY}'","keyLocation":"https://kirill-markin.com/'${INDEXNOW_API_KEY}'.txt","urlList":["https://kirill-markin.com/zh/zhishi/cursor-ide-ai-bianma-guize-youhua/"]}'
```

### 3. Submit multiple pages after a significant update

```bash
# First verify all URLs
curl -I https://kirill-markin.com/
curl -I https://kirill-markin.com/services/
curl -I https://kirill-markin.com/articles/

# Then submit to IndexNow (single-line format for Cursor IDE)
export INDEXNOW_API_KEY=$(grep INDEXNOW_API_KEY .env.local | cut -d '=' -f2)
curl -v -X POST https://api.indexnow.org/indexnow -H "Content-Type: application/json; charset=utf-8" -d '{"host":"kirill-markin.com","key":"'${INDEXNOW_API_KEY}'","keyLocation":"https://kirill-markin.com/'${INDEXNOW_API_KEY}'.txt","urlList":["https://kirill-markin.com/","https://kirill-markin.com/services/","https://kirill-markin.com/articles/"]}'
```

### 4. Submit ALL URLs from sitemap (when user requests all links)

```bash
# Extract all URLs from public sitemap, create JSON payload, and submit
curl -s https://kirill-markin.com/sitemap.xml | grep -o '<loc>[^<]*</loc>' | sed 's/<loc>//g' | sed 's|</loc>||g' > all_urls.txt
export INDEXNOW_API_KEY=$(grep INDEXNOW_API_KEY .env.local | cut -d '=' -f2)
URLS=$(cat all_urls.txt | sed 's/.*/"&"/' | tr '\n' ',' | sed 's/,$//' | sed 's/^/[/' | sed 's/$/]/') && echo "{\"host\":\"kirill-markin.com\",\"key\":\"$INDEXNOW_API_KEY\",\"keyLocation\":\"https://kirill-markin.com/$INDEXNOW_API_KEY.txt\",\"urlList\":$URLS}" > indexnow_payload.json
curl -v -X POST https://api.indexnow.org/indexnow -H "Content-Type: application/json; charset=utf-8" -d @indexnow_payload.json
rm all_urls.txt indexnow_payload.json
```

## API Response Codes

IndexNow API returns the following status codes (which you'll see in the `-v` output):

- **200 OK**: URLs successfully accepted for processing
- **400 Bad Request**: Invalid request (check JSON format and parameters)
- **403 Forbidden**: Key not found at the specified keyLocation
- **422 Unprocessable Entity**: URL doesn't belong to the specified host or other validation error
- **429 Too Many Requests**: You're sending too many requests (potential spam)

Always check for the `HTTP/2 200` response in your terminal output to confirm success.

## Important Notes

### Preferred Submission Method
- Always use the POST method with JSON payload rather than the GET method
- Do not use both methods for the same URL - the POST method is sufficient and preferred
- Always use the `-v` flag to verify the response code
- When using Cursor IDE terminal tools, always format commands as a single line without any line breaks

### Limits
- You can submit up to 10,000 URLs in a single request
- It's recommended not to submit more than 10,000 URLs per day

### Key File Verification
- The API verifies that the key file exists at the URL specified in the request
- Make sure the file `${INDEXNOW_API_KEY}.txt` is accessible at `https://kirill-markin.com/${INDEXNOW_API_KEY}.txt`

### Usage Guidelines
- Only submit URLs for pages that were actually created or modified
- Don't repeatedly submit the same URLs without changes
- Always verify URLs are publicly accessible before submitting
- Check response codes to confirm successful submission
- Use the correct URL structure for multilingual content by checking the localization.ts file
