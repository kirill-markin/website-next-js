# Kirill Markin Website - Project Guide

## Project Overview

Modern personal website built with Next.js, migrated from Jekyll for improved performance.

## Core Architecture Principles

### Static Generation First

Pre-render all possible content at build time:
- Use `generateStaticParams` for dynamic routes
- Optimize SSR pages when content is predictable
- Zero server-side computation at request time
- Pre-generate all category pages and filtered views

### Server Components with Strategic Client Hydration

- Server components for performance
- Client components only where interactivity required 
- Minimal JavaScript to browser
- Limited client-side state

### Dynamic Routes and Params Handling (Next.js 15)

Params in dynamic routes are asynchronous:
```typescript
interface PageProps {
  params: Promise<{ slug: string }>;
}

export default async function Page({ params }: PageProps) {
  const { slug } = await params;
}
```

## Project Structure

```
website-next-js/
├── public/          # Static assets
├── src/             # Application source code
│   ├── app/         # Next.js App Router pages
│   ├── components/  # UI components
│   ├── content/     # Content files
│   ├── data/        # Structured data
│   ├── lib/         # Utility functions
│   └── types/       # TypeScript type definitions
├── next.config.ts   # Next.js configuration
└── package.json     # Dependencies and scripts
```

## Content Structure

### Articles
- Markdown in `src/content/articles/` with translations
- Frontmatter metadata (title, date, description, tags)
- Bidirectional references between translations

### Services
- Structured data in `src/data/services.ts`
- Category-based filtering with URL parameters

### Multilanguage Support
- Multiple languages (en, es, zh, ar, hi)
- Path structure:
  - Default: `/path/` 
  - Localized: `/[lang]/[segment]/[subsegment]/`
- Pre-generated routes with `generateStaticParams`

## Key Functionality

### Sitemap Generation
- GitHub API integration for file modification dates
- Comprehensive coverage of all routes

### SEO Optimization
- Metadata generation (title, description, OpenGraph)
- Canonical URLs and language variants
- Structured data (JSON-LD)

## Development Practices

### Core Principles
- "Static generation first"
- Minimal client-side JavaScript
- Type safety throughout
- SEO-driven development

### Best Practices
- Server Components by default
- CSS Modules for component styling
- Update sitemap file mappings for new pages

## Common Commands

- `npm run dev` - Development server
- `npm run build` - Production build
- `npm run lint` - Run ESLint
- `npm test` - Run tests 